### Polish encoding of accents and other shit
Encoding(MetadataDF$OriginatingLab[2])
MetadataDF<-MetadataDF[! rowSums(is.na(MetadataDF))==ncol(MetadataDF),]
MetadataDF<-MetadataDF[,! colSums(is.na(MetadataDF))==nrow(MetadataDF)]
MetadataDF[,"collection_date"]<-as.character((openxlsx::convertToDate(MetadataDF[,"collection_date"]))) ### Date format forced in template screw import up
MetadataDF$collection_date
# MetadataDF$OriginatingLab<-iconv(MetadataDF$OriginatingLab,from="UTF-8",to="TRANSLIT")
# MetadataDF$OriginatingLabAddress<-iconv(MetadataDF$OriginatingLabAddress,from="UTF-8",to="UTF-8")
# MetadataDF$OriginatingLabAuthors<-iconv(MetadataDF$OriginatingLabAuthors,from="UTF-8",to="UTF-8")
# MetadataDF$AnalysisComments<-iconv(MetadataDF$AnalysisComments,from="UTF-8",to="UTF-8")
# MetadataDF$RunProjectID<-iconv(MetadataDF$RunProjectID,from="UTF-8",to="UTF-8")
MetadataNFNCDF<-merge(MetadataDF,NFNCPGDF,by.x="LibraryID",by.y="library_id",all=T)
Encoding(MetadataNFNCDF$OriginatingLab[2])
colnames(MetadataNFNCDF)[1]<-"library_id"
MetadataDF$OriginatingLab
MetadataNFNCDF$RunProjectID
#### Producte reports for internal use
#### This will be project-specific and contain comprehensive pipeline information for further processing/or not
MetadataNFNCDF$StudyID<-as.factor(MetadataNFNCDF$StudyID)
levels(MetadataNFNCDF$StudyID)
for(study in levels(MetadataNFNCDF$StudyID)){
mySubDF<-subset.data.frame(MetadataNFNCDF,StudyID==study)
#Use ; for FS because mutation list have ","
write.table(mySubDF,file=paste("/Users/mnoguera/Downloads/",projectID,"_",study,".csv",sep=""),row.names = F,fileEncoding = "UTF-8" ,sep=";")
}
#### Produce files for GISAID batch upload
myWD<-"/Users/mnoguera/Downloads/coverage/"
myFiles<-list.files(myWD)
myFiles
myWD<-"/Users/mnoguera/Downloads/coverage/"
myFiles<-list.files(myWD)
myFiles<-list.files(myWD,pattern = "*.tsv")
myWD<-"/Users/mnoguera/Downloads/coverage/"
myFiles<-list.files(myWD,pattern = "*.tsv")
coverageDF <- lapply(myFiles,function(x) {
read.table(file = x,
sep = '\t',
header = TRUE)
})
myFiles
myWD<-"/Users/mnoguera/Downloads/coverage/"
myFiles<-list.files(myWD,pattern = "*.tsv")
coverageDF <- lapply(myFiles,function(x) {
read.table(file = paste(myWD,x,sep=""),
sep = '\t',
header = TRUE)
})
read.table(file = paste(myWD,x,sep=""),
sep = '\t',
header = F)
myFiles
myFiles<-list.files(myWD,pattern = "*.tsv",full.names = T)
coverageDF <- lapply(myFiles,function(x) {
read.table(file =x,
sep = '\t',
header = F)
})
myFiles
myFiles[1]
myWD<-"/Users/mnoguera/Downloads/coverage"
myFiles<-list.files(myWD,pattern = "*.tsv",full.names = T)
coverageDF <- lapply(myFiles,function(x) {
read.table(file =x,
sep = '\t',
header = F)
})
myFiles[1]
read.table(myFiles[1],sep="\t",header=F)
coverageDF <- lapply(myFiles,function(x) {
read.table(file = x,
sep = '\t',
header = F)
})
myFiles
coverageDF <- apply(myFiles, function(x) {
read.table(file = x,
sep = '\t',
header = F)
})
coverageDF <- lapply(myFiles, function(x) {
read.table(file = x,
sep = '\t',
header = F)
})
library(readr)
df <- list.files(myWD,pattern = "*.tsv",full.names = T)%>%
lapply(read_tsv)%>%
bind_rows
require(tidyverse)
library(readr)
df <- list.files(myWD,pattern = "*.tsv",full.names = T)%>%
lapply(read_tsv)%>%
bind_rows
View(df)
install.packages("CoverageView")
BiocManager::install("CoverageView")
lenth(myFiles)
length(myFiles)
covDF<-read.table(file=myFiles[1],sep="\t",header=F)
auxDF<-read.table(file=myFiles[1],sep="\t",header=F)
for (i in 2:length(myFyles)){
auxDF<-read.table(file=myFiles[1],sep="\t",header=F)
}
for (i in 2:length(myFiles)){
auxDF<-read.table(file=myFiles[1],sep="\t",header=F)
}
covDF
myFiles[1]
basename(myFiles[1])
colname<-basename(myFiles[1])
colname<-basename(myFiles[1])
colname=gsub(".mkD.sorted.cov.tsv","",colname)
colnames(covDF)<-c("Reference","position",colname)
length(myFiles)
covDF<-read.table(file=myFiles[1],sep="\t",header=F)
colname<-basename(myFiles[1])
colname=gsub(".mkD.sorted.cov.tsv","",colname)
colnames(covDF)<-c("Reference","position",colname)
for (i in 2:length(myFiles)){
auxDF<-read.table(file=myFiles[1],sep="\t",header=F)
colname<-basename(myFiles[i])
colname=gsub(".mkD.sorted.cov.tsv","",colname)
colnames(auxDF)<-c("Reference","position",colname)
covDF<-merge(covDF,auxDF,by=c("Reference","position",all=T))
}
basename(myFiles[1])auxDF
auxDF
colnames(auxDF)
colnames(covDF)
length(myFiles)
covDF<-read.table(file=myFiles[1],sep="\t",header=F)
colname<-basename(myFiles[1])
colname=gsub(".mkD.sorted.cov.tsv","",colname)
colnames(covDF)<-c("Reference","position",colname)
for (i in 2:length(myFiles)){
auxDF<-read.table(file=myFiles[1],sep="\t",header=F)
colname<-basename(myFiles[i])
colname=gsub(".mkD.sorted.cov.tsv","",colname)
colnames(auxDF)<-c("Reference","position",colname)
covDF<-merge(covDF,auxDF,by=c("Reference","position",all=T))
}
length(myFiles)
covDF<-read.table(file=myFiles[1],sep="\t",header=F)
colname<-basename(myFiles[1])
colname=gsub(".mkD.sorted.cov.tsv","",colname)
colnames(covDF)<-c("Reference","position",colname)
for (i in 2:length(myFiles)){
auxDF<-read.table(file=myFiles[1],sep="\t",header=F)
colname<-basename(myFiles[i])
colname=gsub(".mkD.sorted.cov.tsv","",colname)
colnames(auxDF)<-c("Reference","position",colname)
# auxDF$Reference<-NULL
covDF<-merge(covDF,auxDF,by=c("Reference","position"),all=T)
}
View(covDF)
covDF$position<-as.numeric(covDF$position)
View(covDF)
require(ggplot2)
covDFMelt<-melt(covDF)
covDFMelt<-reshape::melt(covDF)
View(covDFMelt)
?melt
covDF$Reference<-NULL
length(myFiles)
covDF<-read.table(file=myFiles[1],sep="\t",header=F)
colname<-basename(myFiles[1])
colname=gsub(".mkD.sorted.cov.tsv","",colname)
colnames(covDF)<-c("Reference","position",colname)
for (i in 2:length(myFiles)){
auxDF<-read.table(file=myFiles[1],sep="\t",header=F)
colname<-basename(myFiles[i])
colname=gsub(".mkD.sorted.cov.tsv","",colname)
colnames(auxDF)<-c("Reference","position",colname)
# auxDF$Reference<-NULL
covDF<-merge(covDF,auxDF,by=c("Reference","position"),all=T)
}
covDF$Reference<-NULL
length(myFiles)
covDF<-read.table(file=myFiles[1],sep="\t",header=F)
colname<-basename(myFiles[1])
colname=gsub(".mkD.sorted.cov.tsv","",colname)
colnames(covDF)<-c("Reference","position",colname)
for (i in 2:length(myFiles)){
auxDF<-read.table(file=myFiles[1],sep="\t",header=F)
colname<-basename(myFiles[i])
colname=gsub(".mkD.sorted.cov.tsv","",colname)
colnames(auxDF)<-c("Reference","position",colname)
# auxDF$Reference<-NULL
covDF<-merge(covDF,auxDF,by=c("Reference","position"),all=T)
}
covDF$position<-as.numeric(covDF$position)
covDFMelt<-reshape::melt(covDF,id=c("Reference","position"))
require(ggplot2)
ggplot(covDF,aes(x=position,y=value,fill=variable))+geom_line()
colnames(covDF)
ggplot(covDFMelt,aes(x=position,y=value,fill=variable))+geom_line()
colnames(covDF)
colnames(covDFMelt)
ggplot(covDFMelt,aes(x=position,y=value,fill=variable))+geom_line(~variable)
ggplot(covDFMelt,aes(x=position,y=value,color=variable))+geom_line()
ggplot(covDFMelt,aes(x=position,y=value,color=variable))+geom_line(aes(color=variabel))
ggplot(covDFMelt,aes(x=position,y=value,color=variable))+geom_line(aes(color=variable))
ggplot(covDFMelt,aes(x=position,y=value,color=variable))+geom_line(aes(color=variable),size=1)
covDFMelt$variable<-as.factor(covDFMelt$variabl)
covDFMelt$variable<-as.factor(covDFMelt$variable)
covDF$position<-as.numeric(covDF$position)
covDFMelt<-reshape::melt(covDF,id=c("Reference","position"))
covDFMelt$variable<-as.factor(covDFMelt$variable)
require(ggplot2)
ggplot(covDFMelt,aes(x=position,y=value,color=variable))+geom_line(aes(color=variable),size=1)+
theme(axis.text.y = element_text(colour = 'black', size = 12), axis.title.y = element_text(size = 12,  hjust = 0.5, vjust = 0.2)) +
theme(strip.text.y = element_text(size = 11, hjust = 0.5, vjust =    0.5, face = 'bold'))
myWD<-"/Users/mnoguera/Downloads/coverage"
myFiles<-list.files(myWD,pattern = "*.tsv",full.names = T)
length(myFiles)
covDF<-read.table(file=myFiles[1],sep="\t",header=F)
colname<-basename(myFiles[1])
colname=gsub(".mkD.sorted.cov.tsv","",colname)
colnames(covDF)<-c("Reference","position",colname)
for (i in 2:length(myFiles)){
auxDF<-read.table(file=myFiles[i],sep="\t",header=F)
colname<-basename(myFiles[i])
colname=gsub(".mkD.sorted.cov.tsv","",colname)
colnames(auxDF)<-c("Reference","position",colname)
# auxDF$Reference<-NULL
covDF<-merge(covDF,auxDF,by=c("Reference","position"),all=T)
}
for (i in 2:length(myFiles)){
auxDF<-read.table(file=myFiles[i],sep="\t",header=F)
colname<-basename(myFiles[i])
colname=gsub(".mkD.sorted.cov.tsv","",colname)
colnames(auxDF)<-c("Reference","position",colname)
# auxDF$Reference<-NULL
covDF<-merge(covDF,auxDF,by=c("Reference","position"),all=T)
}
myFiles
covDF
myWD<-"/Users/mnoguera/Downloads/coverage"
myFiles<-list.files(myWD,pattern = "*.tsv",full.names = T)
length(myFiles)
covDF<-read.table(file=myFiles[1],sep="\t",header=F)
colname<-basename(myFiles[1])
colname=gsub(".mkD.sorted.cov.tsv","",colname)
colnames(covDF)<-c("Reference","position",colname)
for (i in 2:length(myFiles)){
auxDF<-read.table(file=myFiles[i],sep="\t",header=F)
colname<-basename(myFiles[i])
colname=gsub(".mkD.sorted.cov.tsv","",colname)
colnames(auxDF)<-c("Reference","position",colname)
# auxDF$Reference<-NULL
covDF<-merge(covDF,auxDF,by=c("Reference","position"),all=T)
}
read.table(myFiles[2],sep="\t",header=F)
i
length(myFiles)
covDF<-read.table(file=myFiles[1],sep="\t",header=F)
colname<-basename(myFiles[1])
colname=gsub(".mkD.sorted.cov.tsv","",colname)
colnames(covDF)<-c("Reference","position",colname)
for (i in 2:length(myFiles)){
if(file.info(myFiles[i])$size) > 0 {
auxDF<-read.table(file=myFiles[i],sep="\t",header=F)
colname<-basename(myFiles[i])
colname=gsub(".mkD.sorted.cov.tsv","",colname)
colnames(auxDF)<-c("Reference","position",colname)
# auxDF$Reference<-NULL
covDF<-merge(covDF,auxDF,by=c("Reference","position"),all=T)
}
}
covDF<-read.table(file=myFiles[1],sep="\t",header=F)
colname<-basename(myFiles[1])
colname=gsub(".mkD.sorted.cov.tsv","",colname)
colnames(covDF)<-c("Reference","position",colname)
for (i in 2:length(myFiles)){
if(file.info(myFiles[i])$size)) > 0 {
auxDF<-read.table(file=myFiles[i],sep="\t",header=F)
colname<-basename(myFiles[i])
colname=gsub(".mkD.sorted.cov.tsv","",colname)
colnames(auxDF)<-c("Reference","position",colname)
# auxDF$Reference<-NULL
covDF<-merge(covDF,auxDF,by=c("Reference","position"),all=T)
}
}
length(myFiles)
covDF<-read.table(file=myFiles[1],sep="\t",header=F)
colname<-basename(myFiles[1])
colname=gsub(".mkD.sorted.cov.tsv","",colname)
colnames(covDF)<-c("Reference","position",colname)
for (i in 2:length(myFiles)){
if(file.info(myFiles[i])$size) > 0 ){
auxDF<-read.table(file=myFiles[i],sep="\t",header=F)
colname<-basename(myFiles[i])
colname=gsub(".mkD.sorted.cov.tsv","",colname)
colnames(auxDF)<-c("Reference","position",colname)
# auxDF$Reference<-NULL
covDF<-merge(covDF,auxDF,by=c("Reference","position"),all=T)
}
}
covDF<-read.table(file=myFiles[1],sep="\t",header=F)
colname<-basename(myFiles[1])
colname=gsub(".mkD.sorted.cov.tsv","",colname)
colnames(covDF)<-c("Reference","position",colname)
for (i in 2:length(myFiles)){
if(file.info(myFiles[i])$size > 0 ){
auxDF<-read.table(file=myFiles[i],sep="\t",header=F)
colname<-basename(myFiles[i])
colname=gsub(".mkD.sorted.cov.tsv","",colname)
colnames(auxDF)<-c("Reference","position",colname)
# auxDF$Reference<-NULL
covDF<-merge(covDF,auxDF,by=c("Reference","position"),all=T)
}
}
covDF$position<-as.numeric(covDF$position)
covDFMelt<-reshape::melt(covDF,id=c("Reference","position"))
covDFMelt$variable<-as.factor(covDFMelt$variable)
require(ggplot2)
ggplot(covDFMelt,aes(x=position,y=value,color=variable))+geom_line(aes(color=variable),size=1)+
theme(axis.text.y = element_text(colour = 'black', size = 12), axis.title.y = element_text(size = 12,  hjust = 0.5, vjust = 0.2)) +
theme(strip.text.y = element_text(size = 11, hjust = 0.5, vjust =    0.5, face = 'bold'))
ggplot(covDFMelt,aes(x=position,y=value,color=variable))+geom_line(aes(color=variable),size=0.01)+
theme(axis.text.y = element_text(colour = 'black', size = 12), axis.title.y = element_text(size = 12,  hjust = 0.5, vjust = 0.2)) +
theme(strip.text.y = element_text(size = 11, hjust = 0.5, vjust =    0.5, face = 'bold'))
ArticBed<-read.table("~/Documents/Work/Projects/Coronavirus_2020/SequenciacioNGS/ArticPrimers_BediVar.bed",sep="\t",header=T)
ArticBed<-read.table("~/Documents/Work/Projects/Coronavirus_2020/SequenciacioNGS/ArticPrimers_BediVar.bed",sep="\t",header=F)
ArticBedFw<-ArticBed[grepl("LEFT",ArticBed$V4),]
ArticBedRv<-ArticBed[grepl("RIGHT",ArticBed$V4),]
ArticBed<-read.table("~/Documents/Work/Projects/Coronavirus_2020/SequenciacioNGS/ArticPrimers_BediVar.bed",sep="\t",header=F)
ArticBed<-ArticBed(! grepl("alt_",ArticBed$V4))
ArticBedFw<-ArticBed[grepl("LEFT",ArticBed$V4),]
ArticBed<-ArticBed[(! grepl("alt_",ArticBed$V4)),]
ArticBedFw<-ArticBed[grepl("LEFT",ArticBed$V4),]
ArticBedRv<-ArticBed[grepl("RIGHT",ArticBed$V4),]
ArticBedFw<-ArticBedFw[,c(3,4)]
ArticBedRv<-ArticBedRv[,c(2,4)]
gsub("_LEFT_LEFT","",ArticBedFw$V4)
ArticBed<-read.table("~/Documents/Work/Projects/Coronavirus_2020/SequenciacioNGS/ArticPrimers_BediVar.bed",sep="\t",header=F)
ArticBed<-ArticBed[(! grepl("alt",ArticBed$V4)),]
ArticBedFw<-ArticBed[grepl("LEFT",ArticBed$V4),]
ArticBedRv<-ArticBed[grepl("RIGHT",ArticBed$V4),]
ArticBedFw<-ArticBedFw[,c(3,4)]
ArticBedRv<-ArticBedRv[,c(2,4)]
gsub("_LEFT_LEFT","",ArticBedFw$V4)
ArticBedFw$V4<-gsub("_LEFT_LEFT","",ArticBedFw$V4)
ArticBedRv$V4<-gsub("_RIGHT_RIGHT","",ArticBedRv$V4)
View(ArticBedFw)
colnames(ArticBedFw)<-c("LeftPos","PrimerName")
colnames(ArticBedRv)<-c("RightPos","PrimerName")
merge(ArticBedFw,ArticBedRv,by="PrimerName")
####
#### Example Results Files
# exampleResults/Covid-P001_NFSamples.csv @@@ Contains library_id and s3FastqR1 and s3FastqR2 that are fed into NextFlow pipeline. This file is generated by fetchAndupload.sh
# exampleResults/NFResults.csv @@@ Contains information obtained from Nextflow viralrecon run: Coverage, depth, sequence and intermediat file location
# exampleResults/NextCladeSequences_output.csv @@@ Contains infromation obtained from NextClade Analysis including quality, mutations, and clade.
args = commandArgs(trailingOnly=TRUE)
if(is.na(args[4])){
print("You need to specify NFSamplesFile NextCladeOutputFile MetadataFile all in csv format.")
print("Metadata file needs to include library_id, at least")
}
NFSamplesFile=args[1]
NCOutputFile=args[2]
MetadataFile=args[3]
PGOutputFile=args[4]
projectID=args[5]
projectID="Covid-P001"
NFSamplesFile="exampleResults/NFResults.csv"
NCOutputFile="exampleResults/NextCladeSequences_output.csv"
PGOutputFile="exampleResults/Pangolin_output.csv"
MetadataFile="~/Downloads/COVID-Seq_Template_15012021.xlsx"
#### Merge NextFlow and NextClade results with sample Data
NFSamplesDF<-read.table(file=NFSamplesFile,sep=",")
colnames(NFSamplesDF)<-NFSamplesDF[1,]
colnames(NFSamplesDF)
NFSamplesDF<-NFSamplesDF[-1,]
NCOutputDF<-read.table(file=NCOutputFile,sep=";")
colnames(NCOutputDF)<-NCOutputDF[1,]
NCOutputDF<-NCOutputDF[-1,]
colnames(NCOutputDF)[1]<-"library_id"
colnames(NCOutputDF)
PGOutputDF<-read.table(file=PGOutputFile,sep=",")
colnames(PGOutputDF)<-c("library_id","pangolin_lineage","pangolin_probability","pangoLEARN_version","pangolin_status","pangolin_note")
NFNCDF<-merge(NFSamplesDF,NCOutputDF,all.x=TRUE,by="library_id")
colnames(NFNCDF)
NFNCPGDF<-merge(NFNCDF,PGOutputDF,all.x=T,by="library_id")
MetadataDF<-xlsx::read.xlsx(MetadataFile,encoding = "UTF-8",sheetIndex=2)
colnames(MetadataDF)
colnames(MetadataDF)<-MetadataDF[1,]
MetadataDF<-MetadataDF[-1,]
colnames(MetadataDF)
### Polish encoding of accents and other shit
Encoding(MetadataDF$OriginatingLab[2])
MetadataDF<-MetadataDF[! rowSums(is.na(MetadataDF))==ncol(MetadataDF),]
MetadataDF<-MetadataDF[,! colSums(is.na(MetadataDF))==nrow(MetadataDF)]
MetadataDF[,"collection_date"]<-as.character((openxlsx::convertToDate(MetadataDF[,"collection_date"]))) ### Date format forced in template screw import up
MetadataDF$collection_date
# MetadataDF$OriginatingLab<-iconv(MetadataDF$OriginatingLab,from="UTF-8",to="TRANSLIT")
# MetadataDF$OriginatingLabAddress<-iconv(MetadataDF$OriginatingLabAddress,from="UTF-8",to="UTF-8")
# MetadataDF$OriginatingLabAuthors<-iconv(MetadataDF$OriginatingLabAuthors,from="UTF-8",to="UTF-8")
# MetadataDF$AnalysisComments<-iconv(MetadataDF$AnalysisComments,from="UTF-8",to="UTF-8")
# MetadataDF$RunProjectID<-iconv(MetadataDF$RunProjectID,from="UTF-8",to="UTF-8")
MetadataNFNCDF<-merge(MetadataDF,NFNCPGDF,by.x="LibraryID",by.y="library_id",all=T)
Encoding(MetadataNFNCDF$OriginatingLab[2])
colnames(MetadataNFNCDF)[1]<-"library_id"
MetadataDF$OriginatingLab
MetadataNFNCDF$RunProjectID
#### Producte reports for internal use
#### This will be project-specific and contain comprehensive pipeline information for further processing/or not
MetadataNFNCDF$StudyID<-as.factor(MetadataNFNCDF$StudyID)
levels(MetadataNFNCDF$StudyID)
for(study in levels(MetadataNFNCDF$StudyID)){
mySubDF<-subset.data.frame(MetadataNFNCDF,StudyID==study)
#Use ; for FS because mutation list have ","
write.table(mySubDF,file=paste("/Users/mnoguera/Downloads/",projectID,"_",study,".csv",sep=""),row.names = F,fileEncoding = "UTF-8" ,sep=";")
}
write.table(MetadataNFNCDF,file=paste("/Users/mnoguera/Downloads/",projectID,".csv",sep=""),row.names = F,fileEncoding = "UTF-8" ,sep=";"))
#### Produce files for GISAID batch upload
args = commandArgs(trailingOnly=TRUE)
if(is.na(args[4])){
print("You need to specify NFSamplesFile NextCladeOutputFile MetadataFile all in csv format.")
print("Metadata file needs to include library_id, at least")
}
NFSamplesFile=args[1]
NCOutputFile=args[2]
MetadataFile=args[3]
PGOutputFile=args[4]
projectID=args[5]
projectID="Covid-P001"
NFSamplesFile="exampleResults/NFResults.csv"
NCOutputFile="exampleResults/NextCladeSequences_output.csv"
PGOutputFile="exampleResults/Pangolin_output.csv"
MetadataFile="~/Downloads/COVID-Seq_Template_15012021.xlsx"
NFSamplesDF<-read.table(file=NFSamplesFile,sep=",")
colnames(NFSamplesDF)<-NFSamplesDF[1,]
colnames(NFSamplesDF)
NFSamplesDF<-NFSamplesDF[-1,]
NCOutputDF<-read.table(file=NCOutputFile,sep=";")
colnames(NCOutputDF)<-NCOutputDF[1,]
NCOutputDF<-NCOutputDF[-1,]
colnames(NCOutputDF)[1]<-"library_id"
colnames(NCOutputDF)
PGOutputDF<-read.table(file=PGOutputFile,sep=",")
colnames(PGOutputDF)<-c("library_id","pangolin_lineage","pangolin_probability","pangoLEARN_version","pangolin_status","pangolin_note")
NFNCDF<-merge(NFSamplesDF,NCOutputDF,all.x=TRUE,by="library_id")
colnames(NFNCDF)
NFNCPGDF<-merge(NFNCDF,PGOutputDF,all.x=T,by="library_id")
MetadataDF<-xlsx::read.xlsx(MetadataFile,encoding = "UTF-8",sheetIndex=2)
colnames(MetadataDF)
colnames(MetadataDF)<-MetadataDF[1,]
MetadataDF<-MetadataDF[-1,]
MetadataDF<-xlsx::read.xlsx(MetadataFile,encoding = "UTF-8",sheetIndex=2)
colnames(MetadataDF)
colnames(MetadataDF)<-MetadataDF[1,]
MetadataDF<-MetadataDF[-1,]
colnames(MetadataDF)
### Polish encoding of accents and other shit
Encoding(MetadataDF$OriginatingLab[2])
MetadataDF<-MetadataDF[! rowSums(is.na(MetadataDF))==ncol(MetadataDF),]
MetadataDF<-MetadataDF[,! colSums(is.na(MetadataDF))==nrow(MetadataDF)]
MetadataDF[,"collection_date"]<-as.character((openxlsx::convertToDate(MetadataDF[,"collection_date"]))) ### Date format forced in template screw import up
MetadataDF$collection_date
MetadataNFNCDF<-merge(MetadataDF,NFNCPGDF,by.x="LibraryID",by.y="library_id",all=T)
Encoding(MetadataNFNCDF$OriginatingLab[2])
colnames(MetadataNFNCDF)[1]<-"library_id"
MetadataDF$OriginatingLab
MetadataNFNCDF$RunProjectID
#### Producte reports for internal use
#### This will be project-specific and contain comprehensive pipeline information for further processing/or not
MetadataNFNCDF$StudyID<-as.factor(MetadataNFNCDF$StudyID)
levels(MetadataNFNCDF$StudyID)
for(study in levels(MetadataNFNCDF$StudyID)){
mySubDF<-subset.data.frame(MetadataNFNCDF,StudyID==study)
#Use ; for FS because mutation list have ","
write.table(mySubDF,file=paste("/Users/mnoguera/Downloads/",projectID,"_",study,".csv",sep=""),row.names = F,fileEncoding = "UTF-8" ,sep=";")
}
write.table(MetadataNFNCDF,file=paste("/Users/mnoguera/Downloads/",projectID,".csv",sep=""),row.names = F,fileEncoding = "UTF-8" ,sep=";")
myWD<-"/Users/mnoguera/Downloads/coverage"
myFiles<-list.files(myWD,pattern = "*.tsv",full.names = T)
length(myFiles)
covDF<-read.table(file=myFiles[1],sep="\t",header=F)
colname<-basename(myFiles[1])
colname=gsub(".mkD.sorted.cov.tsv","",colname)
colnames(covDF)<-c("Reference","position",colname)
for (i in 2:length(myFiles)){
if(file.info(myFiles[i])$size > 0 ){
auxDF<-read.table(file=myFiles[i],sep="\t",header=F)
colname<-basename(myFiles[i])
colname=gsub(".mkD.sorted.cov.tsv","",colname)
colnames(auxDF)<-c("Reference","position",colname)
# auxDF$Reference<-NULL
covDF<-merge(covDF,auxDF,by=c("Reference","position"),all=T)
}
}
covDF$position<-as.numeric(covDF$position)
covDFMelt<-reshape::melt(covDF,id=c("Reference","position"))
covDFMelt$variable<-as.factor(covDFMelt$variable)
require(ggplot2)
ggplot(covDFMelt,aes(x=position,y=value,color=variable))+geom_line(aes(color=variable),size=0.01)+
theme(axis.text.y = element_text(colour = 'black', size = 12), axis.title.y = element_text(size = 12,  hjust = 0.5, vjust = 0.2)) +
theme(strip.text.y = element_text(size = 11, hjust = 0.5, vjust =    0.5, face = 'bold'))
rowSums(covDF)
rowSums(covDF[,2:90])
covDF[is.na(covDF)]<-0
rowSums(covDF[,2:90])
fivenum(rowSums(covDF[,2:90]))
ggplot(covDFMelt,aes(x=position,y=value,color=variable))+geom_line(aes(color=variable),size=0.21)+
theme(axis.text.y = element_text(colour = 'black', size = 12), axis.title.y = element_text(size = 12,  hjust = 0.5, vjust = 0.2)) +
theme(strip.text.y = element_text(size = 11, hjust = 0.5, vjust =    0.5, face = 'bold'))
ggplot(covDFMelt,aes(x=position,y=value,color=variable))+geom_line(aes(color=variable),size=0.21)+theme(legend.position = "none")+
theme(axis.text.y = element_text(colour = 'black', size = 12), axis.title.y = element_text(size = 12,  hjust = 0.5, vjust = 0.2)) +
theme(strip.text.y = element_text(size = 11, hjust = 0.5, vjust =    0.5, face = 'bold'))
ggplot(covDFMelt,aes(x=position,y=value,color=variable))+geom_line(aes(color=variable),size=0.021)+theme(legend.position = "none")+
theme(axis.text.y = element_text(colour = 'black', size = 12), axis.title.y = element_text(size = 12,  hjust = 0.5, vjust = 0.2)) +
theme(strip.text.y = element_text(size = 11, hjust = 0.5, vjust =    0.5, face = 'bold'))
